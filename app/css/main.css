@charset "UTF-8";
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
h1,
h2,
figure,
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"], input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

html {
  box-sizing: border-box; }

*,
*::after,
*::before {
  box-sizing: inherit; }

/**
 * Tipsy.sass
 * @author: Dang Van Thanh
 * @description: A Simple Mixin Tooltip CSS Using Sass
 * @version: 1.0.5
 */
@font-face {
  font-family: 'icomoon';
  src: url("/fonts/icomoon.eot?ctccsg");
  src: url("/fonts/icomoon.eot?ctccsg#iefix") format("embedded-opentype"), url("/fonts/icomoon.ttf?ctccsg") format("truetype"), url("/fonts/icomoon.woff?ctccsg") format("woff"), url("/fonts/icomoon.svg?ctccsg#icomoon") format("svg");
  font-weight: normal;
  font-style: normal; }

/*
main .btn {
	font-family:  'helvetica', 'arial', sans-serif;
}	
*/
header li a,
.project figure a p,
.extras a p,
main .btn,
.tooltip:after,
footer,
h1,
h2 {
  font-family: 'Oswald', sans-serif; }

#intro h2,
p {
  font-family: 'Ubuntu', serif;
  font-weight: 400; }

.project figure a p:after,
.project .arrow:after,
#intro ol li a:after,
header a:before,
.mfp-arrow:after,
.btn:after {
  font-family: 'icomoon'; }

header .linkedin:before,
article .linkedin:after {
  content: ""; }

header .instagram:before,
article .instagram:after {
  content: ""; }

header .twitter:before,
article .twitter:after {
  content: ""; }

header .mail:before,
article .mail:after {
  content: ""; }

header .github:before,
article .github:after {
  content: ""; }

header .tools:before,
article .tools:after {
  content: ""; }

.project .arrow:after {
  content: ""; }

.project figure a p:after {
  content: ""; }

header h1 a:before {
  content: ""; }

/* Magnific Popup CSS */
.mfp-bg {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1042;
  overflow: hidden;
  position: fixed;
  background: #0b0b0b;
  opacity: 0.8;
  filter: alpha(opacity=80); }

.mfp-wrap {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1043;
  position: fixed;
  outline: none !important;
  -webkit-backface-visibility: hidden; }

.mfp-container {
  text-align: center;
  position: absolute;
  width: 100%;
  height: 100%;
  left: 0;
  top: 0;
  padding: 0 8px;
  box-sizing: border-box; }

.mfp-container:before {
  content: '';
  display: inline-block;
  height: 100%;
  vertical-align: middle; }

.mfp-align-top .mfp-container:before {
  display: none; }

.mfp-content {
  position: relative;
  display: inline-block;
  vertical-align: middle;
  margin: 0 auto;
  text-align: left;
  z-index: 1045; }

.mfp-inline-holder .mfp-content,
.mfp-ajax-holder .mfp-content {
  width: 100%;
  cursor: auto; }

.mfp-ajax-holder .mfp-content {
  padding: 30px 8%; }

.mfp-ajax-cur {
  cursor: progress; }

.mfp-zoom-out-cur, .mfp-zoom-out-cur .mfp-image-holder .mfp-close {
  cursor: -webkit-zoom-out;
  cursor: zoom-out; }

.mfp-zoom {
  cursor: pointer;
  cursor: -webkit-zoom-in;
  cursor: zoom-in; }

.mfp-auto-cursor .mfp-content {
  cursor: auto; }

.mfp-close,
.mfp-arrow,
.mfp-preloader,
.mfp-counter {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
      user-select: none; }

.mfp-loading.mfp-figure {
  display: none; }

.mfp-hide {
  display: none !important; }

.mfp-preloader {
  color: #CCC;
  position: absolute;
  top: 50%;
  width: auto;
  text-align: center;
  margin-top: -0.8em;
  left: 8px;
  right: 8px;
  z-index: 1044; }
  .mfp-preloader a {
    color: #CCC; }
    .mfp-preloader a:hover {
      color: #FFF; }

.mfp-s-ready .mfp-preloader {
  display: none; }

.mfp-s-error .mfp-content {
  display: none; }

button.mfp-close,
button.mfp-arrow {
  overflow: visible;
  cursor: pointer;
  background: transparent;
  border: 0;
  -webkit-appearance: none;
  display: block;
  outline: none;
  padding: 0;
  z-index: 1046;
  box-shadow: none; }

button::-moz-focus-inner {
  padding: 0;
  border: 0; }

.mfp-close {
  width: 44px;
  height: 44px;
  line-height: 44px;
  position: absolute;
  right: 0;
  top: 0;
  text-decoration: none;
  text-align: center;
  opacity: 0.65;
  filter: alpha(opacity=65);
  padding: 0 0 18px 10px;
  color: #FFF;
  font-style: normal;
  font-size: 28px;
  font-family: Arial, Baskerville, monospace; }
  .mfp-close:hover,
  .mfp-close:focus {
    opacity: 1;
    filter: alpha(opacity=100); }
  .mfp-close:active {
    top: 1px; }

.mfp-close-btn-in .mfp-close {
  color: #333; }

.mfp-image-holder .mfp-close,
.mfp-iframe-holder .mfp-close {
  color: #FFF;
  right: -6px;
  text-align: right;
  padding-right: 6px;
  width: 100%; }

.mfp-counter {
  position: absolute;
  top: 0;
  right: 0;
  color: #CCC;
  font-size: 12px;
  line-height: 18px;
  white-space: nowrap; }

.mfp-arrow {
  position: absolute;
  opacity: 0.65;
  filter: alpha(opacity=65);
  margin: 0;
  top: 50%;
  margin-top: -55px;
  padding: 0;
  width: 90px;
  height: 110px;
  -webkit-tap-highlight-color: transparent; }
  .mfp-arrow:active {
    margin-top: -54px; }
  .mfp-arrow:hover,
  .mfp-arrow:focus {
    opacity: 1;
    filter: alpha(opacity=100); }
  .mfp-arrow:before,
  .mfp-arrow:after,
  .mfp-arrow .mfp-b,
  .mfp-arrow .mfp-a {
    content: '';
    display: block;
    width: 0;
    height: 0;
    position: absolute;
    left: 0;
    top: 0;
    color: #DBDBDB;
    font-size: 70px;
    /*
      margin-top: 35px;
      margin-left: 35px;
      border: medium inset transparent;
*/ }
  .mfp-arrow:after,
  .mfp-arrow .mfp-a {
    /*
      border-top-width: 13px;
      border-bottom-width: 13px;
*/
    top: 8px; }
  .mfp-arrow:before,
  .mfp-arrow .mfp-b {
    border-top-width: 21px;
    border-bottom-width: 21px;
    opacity: 0.7; }

.mfp-arrow-left {
  left: 0; }
  .mfp-arrow-left:after,
  .mfp-arrow-left .mfp-a {
    content: "";
    /*
      border-right: 17px solid $mfp-controls-color;
      margin-left: 31px;
*/ }
  .mfp-arrow-left:before,
  .mfp-arrow-left .mfp-b {
    margin-left: 25px;
    border-right: 27px solid #3F3F3F; }

.mfp-arrow-right {
  right: 0; }
  .mfp-arrow-right:after,
  .mfp-arrow-right .mfp-a {
    content: "";
    /*
      border-left: 17px solid $mfp-controls-color;
      margin-left: 39px
*/ }
  .mfp-arrow-right:before,
  .mfp-arrow-right .mfp-b {
    border-left: 27px solid #3F3F3F; }

.mfp-iframe-holder {
  padding-top: 40px;
  padding-bottom: 40px; }
  .mfp-iframe-holder .mfp-content {
    line-height: 0;
    width: 100%;
    max-width: 900px; }
  .mfp-iframe-holder .mfp-close {
    top: -40px; }

.mfp-iframe-scaler {
  width: 100%;
  height: 0;
  overflow: hidden;
  padding-top: 56.25%; }
  .mfp-iframe-scaler iframe {
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);
    background: #000; }

/* Main image in popup */
img.mfp-img {
  width: auto;
  max-width: 100%;
  height: auto;
  display: block;
  line-height: 0;
  box-sizing: border-box;
  padding: 40px 0 40px;
  margin: 0 auto; }

/* The shadow behind the image */
.mfp-figure {
  line-height: 0; }
  .mfp-figure:after {
    content: '';
    position: absolute;
    left: 0;
    top: 40px;
    bottom: 40px;
    display: block;
    right: 0;
    width: auto;
    height: auto;
    z-index: -1;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.6);
    background: #444; }
  .mfp-figure small {
    color: #BDBDBD;
    display: block;
    font-size: 12px;
    line-height: 14px; }
  .mfp-figure figure {
    margin: 0; }

.mfp-bottom-bar {
  margin-top: -36px;
  position: absolute;
  top: 100%;
  left: 0;
  width: 100%;
  cursor: auto; }

.mfp-title {
  text-align: left;
  line-height: 120%;
  color: #F3F3F3;
  word-wrap: break-word;
  padding-right: 36px;
  font-size: 15px;
  padding: 5px 0 0; }
  .mfp-title span {
    opacity: 0.8;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
    filter: alpha(opacity=80);
    width: 100%;
    display: inline-block;
    font-size: 13px;
    line-height: 120%; }

.mfp-image-holder .mfp-content {
  max-width: 100%; }

.mfp-gallery .mfp-image-holder .mfp-figure {
  cursor: pointer; }

@media screen and (max-width: 800px) and (orientation: landscape), screen and (max-height: 300px) {
  /**
       * Remove all paddings around the image on small screen
       */
  .mfp-img-mobile .mfp-image-holder {
    padding-left: 0;
    padding-right: 0; }
  .mfp-img-mobile img.mfp-img {
    padding: 0; }
  .mfp-img-mobile .mfp-figure:after {
    top: 0;
    bottom: 0; }
  .mfp-img-mobile .mfp-figure small {
    display: inline;
    margin-left: 5px; }
  .mfp-img-mobile .mfp-bottom-bar {
    background: rgba(0, 0, 0, 0.6);
    bottom: 0;
    margin: 0;
    top: auto;
    padding: 3px 5px;
    position: fixed;
    box-sizing: border-box; }
    .mfp-img-mobile .mfp-bottom-bar:empty {
      padding: 0; }
  .mfp-img-mobile .mfp-counter {
    right: 5px;
    top: 3px; }
  .mfp-img-mobile .mfp-close {
    top: 0;
    right: 0;
    width: 35px;
    height: 35px;
    line-height: 35px;
    background: rgba(0, 0, 0, 0.6);
    position: fixed;
    text-align: center;
    padding: 0; } }

@media all and (max-width: 900px) {
  .mfp-arrow {
    -webkit-transform: scale(0.75);
    transform: scale(0.75); }
  .mfp-arrow-left {
    -webkit-transform-origin: 0;
    transform-origin: 0; }
  .mfp-arrow-right {
    -webkit-transform-origin: 100%;
    transform-origin: 100%; }
  .mfp-container {
    padding-left: 6px;
    padding-right: 6px; } }

.mfp-ie7 .mfp-img {
  padding: 0; }

.mfp-ie7 .mfp-bottom-bar {
  width: 600px;
  left: 50%;
  margin-left: -300px;
  margin-top: 5px;
  padding-bottom: 5px; }

.mfp-ie7 .mfp-container {
  padding: 0; }

.mfp-ie7 .mfp-content {
  padding-top: 44px; }

.mfp-ie7 .mfp-close {
  top: 0;
  right: 0;
  padding-top: 0; }

header {
  transition: all 0.2s ease-in-out;
  background-color: #dbdbdb;
  background-color: rgba(219, 219, 219, 0.7);
  position: fixed;
  margin-top: -50px;
  width: 100%;
  z-index: 3; }
  header.show {
    transition: all 0.2s ease-in-out;
    margin-top: 0; }
  header section {
    padding: 0 20px;
    position: relative; }
    @media screen and (max-width: 600px) {
      header section {
        padding: 0; } }
  header h1,
  header h1 a,
  header ul li a {
    font-size: 17px; }
  header h1 a,
  header li a {
    color: #1B1F28;
    padding: 8px 14px;
    display: inline-block;
    text-transform: lowercase; }
    header h1 a:hover,
    header li a:hover {
      background-color: #008c9e;
      background-color: rgba(0, 140, 158, 0.7);
      color: #DBDBDB; }
    @media screen and (max-width: 600px) {
      header h1 a,
      header li a {
        padding: 6px 14px; } }
  @media screen and (max-width: 400px) {
    header h1 a,
    header ul li a {
      font-size: 20px; }
      header h1 a span,
      header ul li a span {
        text-indent: -9999px;
        display: inline-block; } }
  header h1 a:before,
  header ul li a:before {
    position: relative;
    margin: 0 5px 0 0; }
    @media screen and (max-width: 400px) {
      header h1 a:before,
      header ul li a:before {
        margin: 0; } }
  header h1,
  header li {
    float: left; }
  header p {
    opacity: 0.4;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=40)";
    filter: alpha(opacity=40);
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
    margin: 0;
    position: absolute;
    text-align: center;
    width: 100%;
    font-size: 13px; }
  header ul {
    float: left;
    margin-left: 0; }
    header ul li {
      margin: 0 20px 0 0; }
      header ul li:before {
        margin: 0 5px 0 0; }
    header ul .tools {
      display: none; }
  header ol {
    float: right;
    line-height: 140%; }
    header ol li:last-child {
      margin-right: 0; }
    header ol li a {
      font-size: 20px;
      line-height: 25px;
      padding: 7px 7px; }
      @media screen and (max-width: 600px) {
        header ol li a {
          padding: 7px 10px; } }

footer {
  background-color: #1b1f28;
  background-color: rgba(27, 31, 40, 0.9);
  padding: 20px;
  color: #DBDBDB;
  font-size: 14px;
  padding: 20px 0;
  text-align: center; }

#intro {
  background-color: #1b1f28;
  background-color: rgba(27, 31, 40, 0.5);
  padding: 0; }
  #intro section {
    padding: 100px 20px 20px; }
    @media screen and (max-width: 1100px) {
      #intro section {
        padding: 50px 20px 20px; } }
    @media screen and (max-width: 800px) {
      #intro section {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 100%;
        padding: 50px 20px; }
        #intro section:last-child {
          margin-right: 0; } }
    @media screen and (max-width: 700px) {
      #intro section {
        padding: 40px 20px; } }
  #intro h1,
  #intro h2 {
    color: #DBDBDB; }
  #intro h1 {
    color: #00b4cc;
    color: rgba(0, 180, 204, 0.6);
    font-size: 60px;
    padding: 0 0 20px 0;
    line-height: 110%; }
    @media screen and (max-width: 750px) {
      #intro h1 {
        font-size: 50px;
        line-height: 120%; } }
    @media screen and (max-width: 600px) {
      #intro h1 {
        font-size: 40px;
        line-height: 120%; } }
    @media screen and (max-width: 400px) {
      #intro h1 {
        font-size: 40px;
        line-height: 115%; } }
    #intro h1 mark {
      color: #00B4CC;
      font-size: 55px;
      text-transform: uppercase; }
      @media screen and (max-width: 750px) {
        #intro h1 mark {
          font-size: 50px; } }
      @media screen and (max-width: 600px) {
        #intro h1 mark {
          font-size: 40px; } }
  #intro h2 {
    font-size: 17px;
    line-height: 150%; }
    #intro h2 p {
      margin: 7px 0; }
  #intro div {
    float: left;
    display: block;
    margin-right: 2.3576515979%;
    width: 50.527135061%;
    /*
		@include media($max900) {
			@include span-columns(8);
		}		
*/ }
    #intro div:last-child {
      margin-right: 0; }
    @media screen and (max-width: 1100px) {
      #intro div {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 65.8807828007%; }
        #intro div:last-child {
          margin-right: 0; } }
    @media screen and (max-width: 800px) {
      #intro div {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 82.9403914003%; }
        #intro div:last-child {
          margin-right: 0; } }
    @media screen and (max-width: 700px) {
      #intro div {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 100%; }
        #intro div:last-child {
          margin-right: 0; } }
  #intro .btn {
    font-size: 18px;
    padding: 10px 40px 12px 10px; }
    #intro .btn:after {
      position: absolute;
      margin-left: 10px; }
  #intro ul,
  #intro ol {
    padding: 30px 0 15px 0;
    overflow: hidden; }
  #intro ul li {
    float: left;
    margin: 0 0 0 20px; }
    @media screen and (max-width: 500px) {
      #intro ul li {
        margin: 0 0 0 10px; } }
    @media screen and (max-width: 350px) {
      #intro ul li {
        margin: 0 0 10px 0;
        width: 100%; }
        #intro ul li a {
          width: 100%; } }
    #intro ul li:first-child {
      margin-left: 0; }
  @media screen and (max-width: 350px) {
    #intro ol {
      margin: 0 auto;
      padding: 10px 0 15px;
      width: 168px; } }
  #intro ol li {
    float: left;
    margin: 0 0 0 15px; }
    #intro ol li:first-child {
      margin: 0; }

.project {
  background-color: #008c9e;
  background-color: rgba(0, 140, 158, 0.9);
  position: relative; }
  .project:nth-child(2n) {
    background-color: #1b1f28;
    background-color: rgba(27, 31, 40, 0.9); }
    .project:nth-child(2n) figure {
      margin-right: 0;
      background-color: #1b1f28;
      background-color: rgba(27, 31, 40, 0.9);
      float: left; }
      .project:nth-child(2n) figure:hover figcaption p {
        color: #1B1F28; }
      .project:nth-child(2n) figure figcaption:before {
        background: linear-gradient(to bottom, rgba(219, 219, 219, 0) 0%, rgba(219, 219, 219, 0.8) 75%); }
    .project:nth-child(2n) div {
      margin-right: 0;
      color: #DBDBDB;
      float: right; }
      .project:nth-child(2n) div h1 {
        color: #DBDBDB; }
      .project:nth-child(2n) div a {
        color: #DBDBDB; }
        .project:nth-child(2n) div a:hover {
          color: #DBDBDB; }
    .project:nth-child(2n) .btn {
      color: #DBDBDB;
      border: 2px solid #DBDBDB; }
      .project:nth-child(2n) .btn:hover {
        color: #00B4CC;
        border: 2px solid #00B4CC; }
  .project:last-child {
    height: 90vh; }
    @media screen and (max-width: 800px) {
      .project:last-child {
        height: auto;
        min-height: 0; } }
    .project:last-child .arrow.up {
      top: 0; }
    .project:last-child .arrow.down {
      display: none; }
  .project h2 {
    opacity: 0.8;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
    filter: alpha(opacity=80);
    font-size: 20px; }
  .project .arrow {
    opacity: 0.2;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
    filter: alpha(opacity=20);
    position: absolute;
    left: 50%;
    margin-left: -35px; }
    .project .arrow.down {
      bottom: 0; }
      .project .arrow.down:after {
        content: ""; }
    .project .arrow.up {
      top: 30px; }
      .project .arrow.up:after {
        content: ""; }
    @media screen and (max-width: 800px) {
      .project .arrow {
        display: none; } }
    .project .arrow:after {
      font-size: 70px;
      color: #DBDBDB; }
    .project .arrow:hover {
      opacity: 0.6;
      -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=60)";
      filter: alpha(opacity=60); }
  .project .tooltip {
    position: relative;
    display: inline-block;
    opacity: 0.8;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
    filter: alpha(opacity=80);
    color: #DBDBDB;
    position: absolute;
    left: 50%;
    margin-left: -2.5px;
    bottom: 50px;
    width: 5px;
    height: 5px; }
    .project .tooltip:hover:before, .project .tooltip:hover:after, .project .tooltip:focus:before, .project .tooltip:focus:after {
      visibility: visible;
      opacity: 1; }
    .project .tooltip:before, .project .tooltip:after {
      position: absolute;
      visibility: hidden;
      opacity: 0;
      z-index: 1000000;
      pointer-events: none;
      transform: translate3d(0, 0, 0);
      -webkit-transform: translate3d(0, 0, 0);
      transition: 250ms ease-in-out;
      -webkit-transition: 250ms ease-in-out; }
    .project .tooltip:before {
      content: '';
      border: 10px solid transparent;
      bottom: 0;
      z-index: 1000001; }
    .project .tooltip:after {
      content: attr(data-tipsy);
      background-color: #1B1F28;
      border-radius: 0;
      color: white;
      text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.2);
      padding: 5px 10px;
      white-space: nowrap;
      box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2); }
    .project .tooltip:hover:before, .project .tooltip:focus:before {
      top: -15%; }
    .project .tooltip:hover:after, .project .tooltip:focus:after {
      bottom: 115%; }
    .project .tooltip:before, .project .tooltip:after {
      left: 50%;
      transform: translateX(-50%);
      -webkit-transform: translateX(-50%); }
    .project .tooltip:before {
      border-top-color: #1B1F28;
      top: -35%; }
    .project .tooltip:after {
      bottom: 135%; }
    .project .tooltip:after {
      padding: 7px 15px; }
    .project .tooltip.show {
      bottom: 20px; }
      .project .tooltip.show:before,
      .project .tooltip.show:after {
        opacity: 0.8;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
        filter: alpha(opacity=80);
        visibility: visible; }
  .project figure,
  .project div {
    float: left;
    display: block;
    margin-right: 3.5786636068%;
    width: 48.2106681966%; }
    .project figure:last-child,
    .project div:last-child {
      margin-right: 0; }
    @media screen and (max-width: 600px) {
      .project figure,
      .project div {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 100%;
        margin-right: 0; }
        .project figure:last-child,
        .project div:last-child {
          margin-right: 0; } }
  .project figure {
    background-color: #008c9e;
    background-color: rgba(0, 140, 158, 0.9);
    position: relative;
    cursor: pointer;
    overflow: hidden;
    height: auto;
    line-height: 12px;
    max-height: 330px;
    float: right;
    /*
		border: 1px solid;
		@include alpha-attribute('border-color', rgba($black, 0.5), $black);
*/ }
    @media screen and (max-width: 600px) {
      .project figure {
        margin: 50px 0 0 0;
        max-height: 230px; } }
    .project figure:hover {
      transition: 0.2s; }
      .project figure:hover > a:before {
        opacity: 1;
        -webkit-transform: translate3d(0, 0, 0);
                transform: translate3d(0, 0, 0); }
      .project figure:hover > a p {
        transition: 0.2s;
        opacity: 1;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=100)";
        filter: alpha(opacity=100);
        color: #DBDBDB;
        -webkit-transform: translate3d(0, -50%, 0) translate3d(0, 0, 0);
                transform: translate3d(0, -50%, 0) translate3d(0, 0, 0); }
    .project figure > a {
      transition: 0.2s;
      height: 100%;
      position: absolute;
      text-align: center;
      top: 0;
      width: 100%;
      overflow: hidden; }
      .project figure > a:before {
        transition: 0.2s;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(to bottom, rgba(27, 31, 40, 0) 0%, rgba(27, 31, 40, 0.8) 75%);
        content: '';
        opacity: 0;
        -webkit-transform: translate3d(0, 50%, 0);
                transform: translate3d(0, 50%, 0); }
      .project figure > a p {
        transition: 0.2s;
        position: relative;
        top: 50%;
        -webkit-transform: translateY(-50%);
        transform: translateY(-50%);
        opacity: 0;
        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
        filter: alpha(opacity=0);
        margin: 0 auto;
        width: 114px;
        float: none;
        letter-spacing: 0.3px;
        font-size: 20px;
        text-transform: lowercase;
        -webkit-transform: translate3d(0, -50%, 0) translate3d(0, 40px, 0);
                transform: translate3d(0, -50%, 0) translate3d(0, 40px, 0); }
        .project figure > a p:after {
          position: relative;
          margin-left: 5px;
          font-size: 20px; }
    .project figure aside {
      display: none; }
  .project img {
    max-width: 101%;
    height: auto;
    box-sizing: content-box; }
  .project div {
    margin-right: 2.35765%;
    color: #1B1F28; }
    .project div a {
      color: #1B1F28; }
      .project div a:hover {
        color: #1B1F28; }
  .project .btn {
    margin: 20px 0 0 0;
    color: #1B1F28;
    border: 2px solid #1B1F28; }
    @media screen and (max-width: 700px) {
      .project .btn {
        margin: 0; } }
    .project .btn:hover {
      color: #DBDBDB;
      border: 2px solid #DBDBDB; }

.extras ul {
  float: left;
  display: block;
  margin-right: 2.8425855704%;
  width: 48.5787072148%; }
  .extras ul:last-child {
    margin-right: 0; }
  .extras ul:nth-child(2) {
    margin-right: 0; }
  @media screen and (max-width: 600px) {
    .extras ul {
      float: left;
      display: block;
      margin-right: 2.3576515979%;
      width: 100%;
      margin: 30px 0 0; }
      .extras ul:last-child {
        margin-right: 0; } }
  .extras ul li {
    float: left;
    display: block;
    margin-right: 2.3576515979%;
    width: 31.7615656014%;
    margin-bottom: 2.35765%;
    display: block;
    position: relative;
    /*
			&:hover {
			
				span {
					
					&:before {
						opacity: 1;
						transform: translate3d(0,0,0);
					}
					
					p {
						@include transition(0.2s);
						@include Opacity(1);
						color: $white;
						transform: translate3d(0,-50%,0) translate3d(0,0,0);
					}
				}
			}	
*/
    /*
			figcaption {
				display: none;
			}
*/
    /*
			span {
				@include transition(0.2s);
				height: 100%;
				position: absolute;
				text-align: center;
				top: 0;
				width: 100%;
				overflow: hidden;
							
				&:before {
					@include transition(0.2s);
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					background: linear-gradient(to bottom, rgba(27,31,40,0) 0%, rgba(27,31,40,0.8) 75%);
					content: '';
					opacity: 0;
					transform: translate3d(0,50%,0);
				}
			}	
			
			span p {
				font-size: 17px;
			}
*/ }
    .extras ul li:last-child {
      margin-right: 0; }
    .extras ul li:nth-child(3n) {
      margin-right: 0; }
    .extras ul li:nth-child(3n+1) {
      clear: left; }
    @media screen and (max-width: 700px) {
      .extras ul li {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 48.821174201%; }
        .extras ul li:last-child {
          margin-right: 0; }
        .extras ul li:nth-child(3n) {
          margin-right: 2.3576515979%; }
        .extras ul li:nth-child(3n+1) {
          clear: none; }
        .extras ul li:nth-child(2n) {
          margin-right: 0; }
        .extras ul li:nth-child(2n+1) {
          clear: left; } }
    .extras ul li figure {
      width: 100%;
      height: auto;
      margin: 0; }
      .extras ul li figure figcaption p {
        font-size: 17px; }

.js .projects figure img {
  display: none; }

#project header {
  transition: all 0.2s ease-in-out;
  background-color: #dbdbdb;
  background-color: rgba(219, 219, 219, 0.7);
  position: fixed;
  margin-top: 0;
  width: 100%;
  z-index: 3; }

#project article {
  background-color: #1b1f28;
  background-color: rgba(27, 31, 40, 0.9);
  height: auto; }
  #project article:not(#intro) section {
    padding: 0 20px; }
  #project article div {
    float: left;
    display: block;
    margin-right: 2.3576515979%;
    width: 65.8807828007%;
    margin-left: 17.0596085997%;
    margin-right: 0;
    padding: 100px 0 70px 0;
    text-align: center;
    color: #DBDBDB; }
    #project article div:last-child {
      margin-right: 0; }
    @media screen and (max-width: 800px) {
      #project article div {
        float: left;
        display: block;
        margin-right: 2.3576515979%;
        width: 100%;
        margin-left: 0%; }
        #project article div:last-child {
          margin-right: 0; } }
    #project article div h1 {
      font-size: 35px; }
    #project article div h2 {
      opacity: 0.8;
      -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
      filter: alpha(opacity=80);
      font-size: 22px; }
    #project article div p {
      padding: 6px 0; }
      #project article div p a {
        color: #DBDBDB; }
    #project article div a {
      float: none;
      margin: 0 auto;
      width: 130px; }
  #project article ul {
    float: left;
    display: block;
    margin-right: 2.3576515979%;
    width: 100%;
    overflow: hidden; }
    #project article ul:last-child {
      margin-right: 0; }
    #project article ul li {
      width: 100%;
      overflow: hidden;
      text-align: center;
      margin: 0 0 50px 0; }
      #project article ul li:last-child {
        margin: 0; }
      @media screen and (max-width: 600px) {
        #project article ul li {
          margin: 0 0 20px 0; } }
      #project article ul li img {
        max-width: 100%;
        height: auto; }

a {
  color: #00B4CC;
  text-decoration: none; }

mark {
  background: none;
  color: white; }

h1,
h2,
h3,
ul,
ol,
figure {
  margin: 0;
  padding: 0;
  font-weight: normal; }

ul,
ol,
li {
  list-style: none; }

body {
  background: #1B1F28;
  padding: 0;
  margin: 0; }

header > section,
footer > section,
article > section {
  max-width: 1140px;
  margin-left: auto;
  margin-right: auto; }
  header > section::after,
  footer > section::after,
  article > section::after {
    clear: both;
    content: "";
    display: table; }

article {
  -webkit-transform-style: preserve-3d;
  transform-style: preserve-3d;
  width: 100%;
  overflow: hidden;
  height: 100vh;
  min-height: 620px; }
  @media screen and (max-width: 1100px) {
    article {
      height: auto;
      min-height: 0; } }

#home article:not(#intro) section {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  transform: translateY(-50%); }
  @media screen and (max-width: 1100px) {
    #home article:not(#intro) section {
      top: 0;
      -webkit-transform: translateY(0px);
              transform: translateY(0px); } }

article:not(#intro) section {
  padding: 0 20px; }
  @media screen and (max-width: 1100px) {
    article:not(#intro) section {
      padding: 80px 20px; } }
  @media screen and (max-width: 700px) {
    article:not(#intro) section {
      padding: 40px 20px; } }

h1 {
  font-size: 30px; }

main h1 {
  line-height: 120%; }

p {
  line-height: 140%;
  font-size: 16px; }

a {
  transition: all 0.2s ease-in-out; }
  a:hover {
    transition: all 0.2s ease-in-out; }

aside {
  background: url("/media/home.bg.jpg") no-repeat scroll 0 0/cover;
  position: fixed;
  width: 100%;
  height: 100%;
  z-index: -1; }

main .btn {
  padding: 10px 15px;
  border: 2px solid #DBDBDB;
  display: block;
  text-align: center;
  color: #DBDBDB;
  width: auto;
  float: left;
  position: relative;
  text-transform: lowercase;
  font-size: 18px;
  letter-spacing: 0.3px;
  line-height: 100%; }
  main .btn:hover {
    border: 2px solid #00B4CC;
    color: #00B4CC; }

header ol li a,
#intro ol li a {
  color: #1B1F28; }
  header ol li a:hover:after,
  #intro ol li a:hover:after {
    background-color: #00B4CC; }
  header ol li a:after,
  #intro ol li a:after {
    background: #DBDBDB;
    border-radius: 100px;
    padding: 7px; }
  header ol li a span,
  #intro ol li a span {
    text-indent: -9999px;
    display: inline-block; }

#intro ol li a.github {
  position: relative;
  top: -6px; }
  #intro ol li a.github:after {
    background: none;
    color: #DBDBDB;
    padding: 0;
    font-size: 30px; }
  #intro ol li a.github:hover:after {
    color: #00B4CC; }

/*# sourceMappingURL=data:application/json;base64, */